// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres/20170727210828_users.sql
// postgres/20181228200758_display_name.sql
// postgres/20190817143814_force_change_pass.sql

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPostgres20170727210828userssql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcd\x6f\xda\x40\x10\xc5\xef\xfb\x57\xcc\x01\xc9\xa0\x1a\xd2\xa4" +
	"\x1f\x17\x2e\xdd\xda\x6e\x41\x75\x0c\xf1\x47\x24\x4e\xd6\xe2\x9d\xc2\x04\x7f\x65\x77\x5d\x97\xfc\xf5\x15\x86\x50" +
	"\x97\xaa\x55\x32\x17\xcb\xcf\xef\x27\x6b\xde\xe8\x8d\xc7\xf0\xa6\xa0\x8d\x12\x06\x21\xa9\xd9\x78\x0c\xd1\x9d\x0f" +
	"\x54\x82\xc6\xcc\x50\x55\x82\x95\xd4\x16\x90\x06\xfc\x89\x59\x63\x50\x42\xbb\xc5\x12\xcc\x96\x34\x1c\xb9\x83\x89" +
	"\x34\x88\xba\xce\x09\x25\x63\x4e\xe8\xf1\xd8\x83\xc8\x99\x79\xb7\x1c\x84\x10\xd3\xb3\x16\xf3\xcf\xbe\x77\x90\x26" +
	"\x8d\x46\xa5\xd9\x90\x01\x00\x90\x84\xe7\x59\xd3\x46\xa3\x22\x91\xc3\xc5\x04\x8b\x18\x82\xc4\xf7\xed\x8e\xc0\x42" +
	"\xd0\xc9\xf2\x43\xa8\x6c\x2b\xd4\xa5\xff\x92\xa8\x85\xd6\x6d\xa5\xe4\xcb\x09\x6d\x84\x69\x74\xf7\x81\x4a\xf3\xb7" +
	"\xbb\x4f\x80\xeb\x7d\xe1\x89\x1f\xc3\xf5\x91\xcd\x14\x0a\x83\x32\x15\x06\x0c\x15\xa8\x8d\x28\x6a\x68\xc9\x6c\xbb" +
	"\x57\x78\xaa\x4a\xbc\xf8\x5b\x53\xcb\x57\x12\xb9\xd0\x26\xcd\xab\x0d\x95\xff\x24\x8e\x46\x67\x11\x44\x71\xc8\xe7" +
	"\x41\x7c\x48\x3e\xed\x92\x4f\x49\xa6\xb5\xa2\x42\xa8\x3d\x2c\xc3\xf9\x2d\x0f\x57\xf0\xcd\x5b\xc1\x90\xe4\xe8\x3f" +
	"\x54\x97\x7b\xda\x94\xf4\xd8\x20\x24\xc1\xfc\x2e\xf1\x60\xd8\x89\x23\x36\x9a\x32\x36\x0f\x22\x2f\x8c\x61\x1e\xc4" +
	"\x8b\xdf\x57\x3e\x39\xec\xf3\x0d\xec\x53\xb6\x76\x2f\x27\xbb\x97\x80\xdd\xdb\x6d\xc4\xee\xb9\x9f\x78\x11\x0c\xad" +
	"\x42\x68\x83\xea\x53\x86\xaa\xc9\x51\x94\x13\x52\x96\x0d\xd6\xe0\x46\x0c\xde\x7e\x1c\x3c\xb8\x7c\xff\xe1\xfa\x7d" +
	"\x84\xc5\xd7\xd6\x99\x6d\xdd\xc9\x64\xf7\x5d\xa2\x6c\xaf\x68\xed\xbc\x7b\xda\x3f\x4c\x76\x8f\x4b\xe3\xcc\x16\x15" +
	"\x6f\xef\x57\x33\xe7\x2a\xcc\x5d\x5f\x58\x36\xdc\xd8\x60\x95\x55\x6b\xfd\xf9\x38\xec\xd2\x2f\x86\x5b\xb5\xe5\x73" +
	"\x35\xce\xbd\x38\x88\x2f\x6a\x86\xaa\xf2\x1c\x25\xac\x45\xb6\x63\xcc\x0d\x17\xcb\x5e\x37\xc0\xe1\x91\xc3\x5d\x6f" +
	"\xca\x7e\x05\x00\x00\xff\xff\x23\xa6\x3e\x56\x89\x03\x00\x00"

func bindataPostgres20170727210828userssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20170727210828userssql,
		"postgres/20170727210828_users.sql",
	)
}

func bindataPostgres20170727210828userssql() (*asset, error) {
	bytes, err := bindataPostgres20170727210828userssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "postgres/20170727210828_users.sql",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(0),
		modTime:     time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPostgres20181228200758displaynamesql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x3e\xc5\xdf\x75\x81\xc2\x05\x22\x16" +
	"\xa6\x8e\xc4\xc2\x24\x25\xb5\xd9\xa2\x21\x19\xd1\x11\x8e\x63\xc5\xa9\x0a\xb7\x47\x01\x81\x8a\x54\x45\xdd\xce\xfc" +
	"\x3f\x6f\x5e\x51\xe0\x66\x90\xb7\x89\x66\x86\x4f\xaa\x28\xb0\x7f\xb2\x90\x88\xcc\xdd\x2c\x63\xc4\xc6\xa7\x0d\x24" +
	"\x83\x3f\xb8\x3b\xce\xdc\xe3\x74\xe0\x88\xf9\x20\x19\x3f\xbd\x25\x24\x19\x94\x52\x10\xee\x95\xd2\xd6\x55\x2d\x9c" +
	"\xbe\xb7\x15\x88\xe8\xf6\x98\x79\xca\x0a\x00\xb4\x31\xd8\x36\xd6\x3f\xd6\xe8\x25\xa7\x40\x9f\x2f\x91\x06\xc6\xb3" +
	"\x6e\xb7\x0f\xba\x2d\x95\xdf\x19\xed\xce\x5b\xfb\xca\xfd\x8f\xde\x81\x07\x92\x50\xae\x51\xbe\x37\x97\x38\xcb\xb5" +
	"\xba\x71\xa8\xbd\xb5\xa5\x52\xe7\xea\x66\x3c\xc5\x5f\xf9\x3f\xf3\x65\x78\x95\xfb\x34\x86\xc0\x3d\x5e\xa9\x7b\x5f" +
	"\xf3\x37\x6d\xb3\xbb\xf4\x58\xf9\x15\x00\x00\xff\xff\xb5\x32\x62\xbe\x85\x01\x00\x00"

func bindataPostgres20181228200758displaynamesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20181228200758displaynamesql,
		"postgres/20181228200758_display_name.sql",
	)
}

func bindataPostgres20181228200758displaynamesql() (*asset, error) {
	bytes, err := bindataPostgres20181228200758displaynamesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "postgres/20181228200758_display_name.sql",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(0),
		modTime:     time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPostgres20190817143814forcechangepasssql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xb1\x4e\xc3\x40\x10\x04\xd0\x7e\xbf\x62\xba\x14\xc8\xfc\x40\x2a" +
	"\x83\xd3\x1d\x04\x42\x5c\x47\xcb\x79\x95\x5b\x61\xdf\x9d\xbc\x1b\x19\xf1\xf5\xc8\x20\x10\x05\x42\x94\x33\x9a\x91" +
	"\x5e\xd3\xe0\x6a\xd2\xf3\xcc\x2e\xe8\x2b\x35\x0d\x9e\x1e\x03\x34\xc3\x24\xba\x96\x8c\x4d\x5f\x37\x50\x83\xbc\x4a" +
	"\xbc\xb8\x0c\x58\x92\x64\x78\x52\xc3\xe7\x6f\x1d\xa9\x81\x6b\x1d\x55\x06\x22\x6a\xc3\x71\x77\xc0\xb1\xbd\x09\x3b" +
	"\x30\xf3\xf5\xc5\x64\x36\x02\x80\xb6\xeb\x70\xbb\x0f\xfd\xdd\x3d\x62\xe2\x7c\x96\x53\x65\xb3\x13\x3b\x5c\x27\x31" +
	"\xe7\xa9\x62\x51\x4f\x1f\x11\x6f\x25\xcb\x96\xe8\xa7\xb0\x2b\x4b\xfe\x32\x7e\x03\xd7\xf2\x5f\xc4\xb9\x8c\xa3\x0c" +
	"\x78\xe6\xf8\xf2\x97\xb2\x3b\xec\x1f\x7e\x67\x6e\xe9\x3d\x00\x00\xff\xff\xf4\xff\x40\xfd\x2f\x01\x00\x00"

func bindataPostgres20190817143814forcechangepasssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20190817143814forcechangepasssql,
		"postgres/20190817143814_force_change_pass.sql",
	)
}

func bindataPostgres20190817143814forcechangepasssql() (*asset, error) {
	bytes, err := bindataPostgres20190817143814forcechangepasssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "postgres/20190817143814_force_change_pass.sql",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(0),
		modTime:     time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"postgres/20170727210828_users.sql":             bindataPostgres20170727210828userssql,
	"postgres/20181228200758_display_name.sql":      bindataPostgres20181228200758displaynamesql,
	"postgres/20190817143814_force_change_pass.sql": bindataPostgres20190817143814forcechangepasssql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"postgres": {Func: nil, Children: map[string]*bintree{
		"20170727210828_users.sql":             {Func: bindataPostgres20170727210828userssql, Children: map[string]*bintree{}},
		"20181228200758_display_name.sql":      {Func: bindataPostgres20181228200758displaynamesql, Children: map[string]*bintree{}},
		"20190817143814_force_change_pass.sql": {Func: bindataPostgres20190817143814forcechangepasssql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
