// Code generated by protoc-gen-grpchan. DO NOT EDIT.
// source: modules/company/proto/company.proto

package companypb

import "github.com/fullstorydev/grpchan"
import "golang.org/x/net/context"
import "google.golang.org/grpc"

func RegisterHandlerCompanySystem(reg grpchan.ServiceRegistry, srv CompanySystemServer) {
	reg.RegisterService(&_CompanySystem_serviceDesc, srv)
}

type companySystemChannelClient struct {
	ch grpchan.Channel
}

func NewCompanySystemChannelClient(ch grpchan.Channel) CompanySystemClient {
	return &companySystemChannelClient{ch: ch}
}

func (c *companySystemChannelClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error) {
	out := new(CompanyResponse)
	err := c.ch.Invoke(ctx, "/company.CompanySystem/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companySystemChannelClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error) {
	out := new(CompanyResponse)
	err := c.ch.Invoke(ctx, "/company.CompanySystem/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companySystemChannelClient) GetCompanies(ctx context.Context, in *GetCompaniesRequest, opts ...grpc.CallOption) (*CompaniesResponse, error) {
	out := new(CompaniesResponse)
	err := c.ch.Invoke(ctx, "/company.CompanySystem/GetCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companySystemChannelClient) DeleteCompany(ctx context.Context, in *DeleteCompanyRequest, opts ...grpc.CallOption) (*DeleteCompanyResponse, error) {
	out := new(DeleteCompanyResponse)
	err := c.ch.Invoke(ctx, "/company.CompanySystem/DeleteCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
