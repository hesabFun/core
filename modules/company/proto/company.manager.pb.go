// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modules/company/proto/company.proto

package companypb

import (
	context "context"
	elbix_dev_engine_pkg_postgres_model "elbix.dev/engine/pkg/postgres/model"
	fmt "fmt"
	_ "github.com/fzerorubigd/protobuf/extra"
	_ "github.com/fzerorubigd/protobuf/types"
	github_com_fzerorubigd_protobuf_types "github.com/fzerorubigd/protobuf/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const (
	CompanySchema    = "aaa"
	CompanyTable     = "companies"
	CompanyTableFull = CompanySchema + "." + CompanyTable
)

type Manager struct {
	elbix_dev_engine_pkg_postgres_model.Manager
}

func NewManager() *Manager {
	return &Manager{}
}

func NewManagerFromTransaction(tx elbix_dev_engine_pkg_postgres_model.DBX) (*Manager, error) {
	m := &Manager{}
	err := m.Hijack(tx)

	if err != nil {
		return nil, err
	}

	return m, nil
}

/*
main.modelData{
    table:     "companies",
    schema:    "aaa",
    model:     "Company",
    receiver:  "c",
    dbFields:  {"id", "name", "status", "created_at", "updated_at"},
    goFields:  {"Id", "Name", "Status", "CreatedAt", "UpdatedAt"},
    types:     {},
    createdAt: true,
    updatedAt: true,
    hasID:     true,
}
*/

func (m *Manager) CreateCompany(ctx context.Context, c *Company) error {
	now := time.Now()
	c.CreatedAt = github_com_fzerorubigd_protobuf_types.TimestampProto(now)
	c.UpdatedAt = github_com_fzerorubigd_protobuf_types.TimestampProto(now)
	func(in interface{}) {
		if o, ok := in.(interface{ PreInsert() }); ok {
			o.PreInsert()
		}
	}(c)
	q := `INSERT INTO aaa.companies(name, status, created_at, updated_at) VALUES ($1, $2, $3, $4) RETURNING id`
	row := m.GetDbMap().QueryRowxContext(ctx, q, c.Name, c.Status, c.CreatedAt, c.UpdatedAt)
	return row.Scan(&c.Id)
}

func (m *Manager) UpdateCompany(ctx context.Context, c *Company) error {
	var err error
	now := time.Now()
	c.UpdatedAt = github_com_fzerorubigd_protobuf_types.TimestampProto(now)
	func(in interface{}) {
		if o, ok := in.(interface{ PreUpdate() }); ok {
			o.PreUpdate()
		}
	}(c)
	q := `UPDATE aaa.companies SET name = $1, status = $2, created_at = $3, updated_at = $4 WHERE id = $5`
	_, err = m.GetDbMap().ExecContext(ctx, q, c.Name, c.Status, c.CreatedAt, c.UpdatedAt, c.Id)
	return err
}

func (m *Manager) GetCompanyByPrimary(ctx context.Context, id int64) (*Company, error) {
	q := `SELECT id, name, status, created_at, updated_at FROM aaa.companies WHERE id = $1`
	row := m.GetDbMap().QueryRowxContext(ctx, q, id)

	return m.scanCompany(row)
}

func (m *Manager) scanCompany(row elbix_dev_engine_pkg_postgres_model.Scanner, extra ...interface{}) (*Company, error) {
	var c Company
	all := append([]interface{}{&c.Id, &c.Name, &c.Status, &c.CreatedAt, &c.UpdatedAt}, extra...)
	err := row.Scan(all...)
	if err != nil {
		return nil, err
	}
	return &c, nil
}

func (m *Manager) getCompanyFields() []string {
	return []string{"id", "name", "status", "created_at", "updated_at"}
}
