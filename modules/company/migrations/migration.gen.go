// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres/20180427095438-create_table_companies.sql

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPostgres20180427095438createtablecompaniessql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x4e\xf2\x40\x14\x85\xf7\xf3\x14\x67\x07\xe4\xff\x6b\xe2\x9a" +
	"\x55\x85\x9a\x10\x6b\xc1\xd2\x2e\x58\x35\x97\xce\x0d\xbd\x09\x9d\x4e\x66\xa6\xa2\x3e\xbd\xa1\xa0\x92\xba\xf2\xec" +
	"\x26\xe7\x7c\x99\xe4\xbb\x51\x84\x7f\xad\x1c\x1c\x05\x46\x69\x55\x14\x61\xfb\x92\x42\x0c\x3c\xd7\x41\x3a\x83\x49" +
	"\x69\x27\x10\x0f\x7e\xe3\xba\x0f\xac\x71\x6a\xd8\x20\x34\xe2\x71\xe1\xce\x23\xf1\x20\x6b\x8f\xc2\x5a\xa9\x45\x9e" +
	"\xc4\x45\x82\x22\x7e\x48\x13\x10\xd1\x5d\xdd\xb5\x96\x8c\xb0\x57\x53\x05\x00\xa2\xf1\x95\xbd\x1c\x3c\x3b\xa1\x23" +
	"\x46\xc9\xd6\x05\xb2\x32\x4d\xff\x0f\x84\xa1\x96\xaf\xc5\x2b\xb9\xba\x21\x37\xde\x8f\x09\x1f\x28\xf4\x7e\x28\xc4" +
	"\x84\xdf\xeb\x5b\x02\xcb\xe4\x31\x2e\xd3\x02\xf7\x17\xb6\x76\x4c\x81\x75\x45\x01\x41\x5a\xf6\x81\x5a\x8b\x93\x84" +
	"\x66\x78\xe2\xa3\x33\x3c\xfa\xad\xb7\xfa\x8f\xc4\x62\x9d\x6d\x8b\x3c\x5e\x65\xc5\x59\x51\xf5\xad\xa8\x12\x5d\x59" +
	"\x27\x2d\xb9\x77\x6c\xf2\xd5\x73\x9c\xef\xf0\x94\xec\x30\x15\x3d\x53\xb3\xb9\x52\xb7\xf7\x5a\x76\x27\xa3\x96\xf9" +
	"\x7a\x73\x95\x6d\xfb\xfd\x51\xea\x1f\xdf\xf3\xcf\x00\x00\x00\xff\xff\xcb\x44\x6e\xad\xdd\x01\x00\x00"

func bindataPostgres20180427095438createtablecompaniessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20180427095438createtablecompaniessql,
		"postgres/20180427095438-create_table_companies.sql",
	)
}

func bindataPostgres20180427095438createtablecompaniessql() (*asset, error) {
	bytes, err := bindataPostgres20180427095438createtablecompaniessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "postgres/20180427095438-create_table_companies.sql",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(0),
		modTime:     time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"postgres/20180427095438-create_table_companies.sql": bindataPostgres20180427095438createtablecompaniessql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"postgres": {Func: nil, Children: map[string]*bintree{
		"20180427095438-create_table_companies.sql": {Func: bindataPostgres20180427095438createtablecompaniessql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
