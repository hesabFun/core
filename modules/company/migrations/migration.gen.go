// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres/20180427095438-create_table_companies.sql

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPostgres20180427095438createtablecompaniessql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x3f\x6f\xdb\x30\x10\xc5\x77\x7e\x8a\xb7\xd9\x46\xab\x02\x9d\x3d" +
	"\xa9\xb6\x0a\x18\x55\x65\x57\x96\x06\x4f\xc2\x59\x3c\x58\x87\x4a\x14\x41\x52\x71\x92\x4f\x1f\xf8\x6f\x0c\x65\x49" +
	"\x6e\x23\xef\xfd\x70\xc0\xfb\x45\x11\xbe\x75\x72\x70\x14\x18\xa5\x55\x51\x84\xed\xbf\x14\x62\xe0\xb9\x0e\xd2\x1b" +
	"\x4c\x4a\x3b\x81\x78\xf0\x33\xd7\x43\x60\x8d\x63\xc3\x06\xa1\x11\x8f\x0b\x77\x0a\x89\x07\x59\xdb\x0a\x6b\xa5\x16" +
	"\x79\x12\x17\x09\x8a\xf8\x57\x9a\x80\x88\x7e\xd4\x7d\x67\xc9\x08\x7b\x35\x55\x00\x20\x1a\xb7\xd9\xcb\xc1\xb3\x13" +
	"\x6a\x31\x9a\x6c\x5d\x20\x2b\xd3\xf4\xfb\x99\x30\xd4\xf1\x75\xf1\x44\xae\x6e\xc8\x8d\xf3\x63\xc2\x07\x0a\x83\x3f" +
	"\x2f\xc4\x84\x8f\xe9\x47\x02\xcb\xe4\x77\x5c\xa6\x05\x7e\x5e\xd8\xda\x31\x05\xd6\x15\x05\x04\xe9\xd8\x07\xea\x2c" +
	"\x8e\x12\x9a\xf3\x13\xaf\xbd\xe1\xd1\xb5\xc1\xea\x2f\x12\x8b\x75\xb6\x2d\xf2\x78\x95\x15\xa7\x8a\xaa\x7b\x45\x95" +
	"\xe8\xca\x3a\xe9\xc8\xbd\x60\x93\xaf\xfe\xc6\xf9\x0e\x7f\x92\x1d\xa6\xa2\x67\x6a\x36\x57\xea\xd1\xd7\xb2\x3f\x9a" +
	"\x9b\xb1\xbb\xae\xd3\xe7\xa7\x84\xb9\xbe\x6d\x59\x63\x4f\xf5\x7f\xa5\x96\xf9\x7a\x73\x55\x66\x87\x7d\x2b\xf5\xbb" +
	"\xb5\xf9\x5b\x00\x00\x00\xff\xff\x97\xc6\x67\x8a\x23\x02\x00\x00"

func bindataPostgres20180427095438createtablecompaniessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20180427095438createtablecompaniessql,
		"postgres/20180427095438-create_table_companies.sql",
	)
}

func bindataPostgres20180427095438createtablecompaniessql() (*asset, error) {
	bytes, err := bindataPostgres20180427095438createtablecompaniessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "postgres/20180427095438-create_table_companies.sql",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(0),
		modTime:     time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"postgres/20180427095438-create_table_companies.sql": bindataPostgres20180427095438createtablecompaniessql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"postgres": {Func: nil, Children: map[string]*bintree{
		"20180427095438-create_table_companies.sql": {Func: bindataPostgres20180427095438createtablecompaniessql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
