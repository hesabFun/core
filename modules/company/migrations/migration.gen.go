// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres/20180427095438-create_table_companies.sql

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPostgres20180427095438createtablecompaniessql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6f\xe2\x30\x10\x85\xef\xfe\x15\xef\x06\x68\x37\x2b\xed\x99" +
	"\x53\x0a\xa9\x84\x9a\x06\x1a\x92\x03\xa7\x68\x88\x47\x64\xd4\xc4\xb1\x6c\x53\xda\xfe\xfa\x0a\x28\x08\xa5\x3d\xb4" +
	"\x73\xb3\xe7\x7d\x1a\xe9\x7d\x51\x84\x3f\x9d\xec\x1c\x05\x46\x69\x55\x14\x61\xfd\x94\x42\x0c\x3c\xd7\x41\x7a\x83" +
	"\x51\x69\x47\x10\x0f\x7e\xe5\x7a\x1f\x58\xe3\xd0\xb0\x41\x68\xc4\xe3\xcc\x1d\x43\xe2\x41\xd6\xb6\xc2\x5a\xa9\x59" +
	"\x9e\xc4\x45\x82\x22\xbe\x4b\x13\x10\xd1\xbf\xba\xef\x2c\x19\x61\xaf\xc6\x0a\x00\x44\xe3\x32\x5b\xd9\x79\x76\x42" +
	"\x2d\x06\x93\x2d\x0b\x64\x65\x9a\xfe\x3d\x11\x86\x3a\xfe\x5c\xbc\x90\xab\x1b\x72\xc3\xfc\x90\xf0\x81\xc2\xde\x9f" +
	"\x16\x62\xc2\xd7\xf4\x2d\x81\x79\x72\x1f\x97\x69\x81\xff\x67\xb6\x76\x4c\x81\x75\x45\x01\x41\x3a\xf6\x81\x3a\x8b" +
	"\x83\x84\xe6\xf4\xc4\x7b\x6f\x78\x70\x6d\x6f\xf5\x2f\x89\xd9\x32\x5b\x17\x79\xbc\xc8\x8a\x63\x45\xd5\xb5\xa2\x4a" +
	"\x74\x65\x9d\x74\xe4\xde\xb0\xca\x17\x8f\x71\xbe\xc1\x43\xb2\xc1\x58\xf4\x44\x4d\xa6\x4a\xdd\xfa\x9a\xf7\x07\x73" +
	"\x31\x76\xd5\x75\xfc\xfc\x91\x30\xd7\xb7\x2d\x6b\x6c\xa9\x7e\x56\x6a\x9e\x2f\x57\xdf\x29\x9b\x7e\x04\x00\x00\xff" +
	"\xff\xe2\x02\xd6\x32\x20\x02\x00\x00"

func bindataPostgres20180427095438createtablecompaniessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20180427095438createtablecompaniessql,
		"postgres/20180427095438-create_table_companies.sql",
	)
}

func bindataPostgres20180427095438createtablecompaniessql() (*asset, error) {
	bytes, err := bindataPostgres20180427095438createtablecompaniessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "postgres/20180427095438-create_table_companies.sql",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(0),
		modTime:     time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"postgres/20180427095438-create_table_companies.sql": bindataPostgres20180427095438createtablecompaniessql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"postgres": {Func: nil, Children: map[string]*bintree{
		"20180427095438-create_table_companies.sql": {Func: bindataPostgres20180427095438createtablecompaniessql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
